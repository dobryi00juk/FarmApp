// <auto-generated />
using System;
using FarmApp.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FarmApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FarmAppContext))]
    partial class FarmAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.ApiMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiMethodName")
                        .IsRequired()
                        .HasColumnType("character varying(350)")
                        .HasMaxLength(350);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("character varying(350)")
                        .HasMaxLength(350);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNeedAuthentication")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNotNullParam")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("PathUrl")
                        .IsRequired()
                        .HasColumnType("character varying(350)")
                        .HasMaxLength(350);

                    b.Property<string>("StoredProcedureName")
                        .HasColumnType("character varying(350)")
                        .HasMaxLength(350);

                    b.HasKey("Id");

                    b.HasIndex("ApiMethodName")
                        .IsUnique();

                    b.ToTable("ApiMethods","api");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiMethodName = "Authenticate",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = false,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/authenticate"
                        },
                        new
                        {
                            Id = 2,
                            ApiMethodName = "Register",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = false,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/register"
                        },
                        new
                        {
                            Id = 3,
                            ApiMethodName = "GetAll",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/getAll"
                        },
                        new
                        {
                            Id = 4,
                            ApiMethodName = "GetById",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Users/getById"
                        },
                        new
                        {
                            Id = 5,
                            ApiMethodName = "Update",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/update"
                        },
                        new
                        {
                            Id = 6,
                            ApiMethodName = "Delete",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Users/delete"
                        },
                        new
                        {
                            Id = 7,
                            ApiMethodName = "GetUsersByRoleAsync",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/getUsersByRoleAsync"
                        },
                        new
                        {
                            Id = 8,
                            ApiMethodName = "SearchUser",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Users/searchUser"
                        },
                        new
                        {
                            Id = 9,
                            ApiMethodName = "GetVendors",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Vendors/GetVendors"
                        },
                        new
                        {
                            Id = 10,
                            ApiMethodName = "GetVendor",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Vendors/GetVendor"
                        },
                        new
                        {
                            Id = 11,
                            ApiMethodName = "PutVendor",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Vendors/PutVendor"
                        },
                        new
                        {
                            Id = 12,
                            ApiMethodName = "PostVendor",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Vendors/PostVendor"
                        },
                        new
                        {
                            Id = 13,
                            ApiMethodName = "DeleteVendor",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Vendors/DeleteVendor"
                        },
                        new
                        {
                            Id = 14,
                            ApiMethodName = "GetSales",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Sales/GetSales"
                        },
                        new
                        {
                            Id = 15,
                            ApiMethodName = "GetSale",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Sales/GetSale"
                        },
                        new
                        {
                            Id = 16,
                            ApiMethodName = "PutSale",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Sales/PutSale"
                        },
                        new
                        {
                            Id = 17,
                            ApiMethodName = "PostSale",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Sales/PostSale"
                        },
                        new
                        {
                            Id = 18,
                            ApiMethodName = "DeleteSale",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Sales/DeleteSale"
                        },
                        new
                        {
                            Id = 54,
                            ApiMethodName = "GetRoles",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetRoles"
                        },
                        new
                        {
                            Id = 55,
                            ApiMethodName = "GetRole",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetRole"
                        },
                        new
                        {
                            Id = 56,
                            ApiMethodName = "PutRole",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutRole"
                        },
                        new
                        {
                            Id = 57,
                            ApiMethodName = "PostRole",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostRole"
                        },
                        new
                        {
                            Id = 58,
                            ApiMethodName = "DeleteRole",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetDeleteRoleUser"
                        },
                        new
                        {
                            Id = 19,
                            ApiMethodName = "GetRegionTypes",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/RegionTypes/GetRoles"
                        },
                        new
                        {
                            Id = 20,
                            ApiMethodName = "GetRegionType",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/RegionTypes/GetRole"
                        },
                        new
                        {
                            Id = 21,
                            ApiMethodName = "PutRegionType",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/RegionTypes/PutRole"
                        },
                        new
                        {
                            Id = 22,
                            ApiMethodName = "PostRegionType",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/RegionTypes/PostRole"
                        },
                        new
                        {
                            Id = 23,
                            ApiMethodName = "DeleteRegionType",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/RegionTypes/GetDeleteRoleUser"
                        },
                        new
                        {
                            Id = 24,
                            ApiMethodName = "GetRegions",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetRegions"
                        },
                        new
                        {
                            Id = 25,
                            ApiMethodName = "GetRegion",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetRegion"
                        },
                        new
                        {
                            Id = 26,
                            ApiMethodName = "PutRegion",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutRegion"
                        },
                        new
                        {
                            Id = 27,
                            ApiMethodName = "PostRegion",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostRegion"
                        },
                        new
                        {
                            Id = 28,
                            ApiMethodName = "DeleteRegion",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/DeleteRegion"
                        },
                        new
                        {
                            Id = 29,
                            ApiMethodName = "GetPharmacies",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetPharmacies"
                        },
                        new
                        {
                            Id = 30,
                            ApiMethodName = "GetPharmacy",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetPharmacy"
                        },
                        new
                        {
                            Id = 31,
                            ApiMethodName = "PutPharmacy",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutPharmacy"
                        },
                        new
                        {
                            Id = 32,
                            ApiMethodName = "PostPharmacy",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostPharmacy"
                        },
                        new
                        {
                            Id = 33,
                            ApiMethodName = "DeletePharmacy",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/DeletePharmacy"
                        },
                        new
                        {
                            Id = 34,
                            ApiMethodName = "GetDrugs",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetDrugs"
                        },
                        new
                        {
                            Id = 35,
                            ApiMethodName = "GetDrug",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetDrug"
                        },
                        new
                        {
                            Id = 36,
                            ApiMethodName = "PutDrug",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutDrug"
                        },
                        new
                        {
                            Id = 37,
                            ApiMethodName = "PostDrug",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostDrug"
                        },
                        new
                        {
                            Id = 38,
                            ApiMethodName = "DeleteDrug",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/DeleteDrug"
                        },
                        new
                        {
                            Id = 39,
                            ApiMethodName = "GetCodeAthTypes",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetCodeAthTypes"
                        },
                        new
                        {
                            Id = 40,
                            ApiMethodName = "GetCodeAthType",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetCodeAthType"
                        },
                        new
                        {
                            Id = 41,
                            ApiMethodName = "PutCodeAthType",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutCodeAthType"
                        },
                        new
                        {
                            Id = 42,
                            ApiMethodName = "PostCodeAthType",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostCodeAthType"
                        },
                        new
                        {
                            Id = 43,
                            ApiMethodName = "DeleteCodeAthType",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/DeleteCodeAthType"
                        },
                        new
                        {
                            Id = 44,
                            ApiMethodName = "GetApiMethods",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "api/Roles/GetApiMethods"
                        },
                        new
                        {
                            Id = 45,
                            ApiMethodName = "GetApiMethod",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "api/Roles/GetApiMethod"
                        },
                        new
                        {
                            Id = 46,
                            ApiMethodName = "PutApiMethod",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "api/Roles/PutApiMethod"
                        },
                        new
                        {
                            Id = 47,
                            ApiMethodName = "PostApiMethod",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "api/Roles/PostApiMethod"
                        },
                        new
                        {
                            Id = 48,
                            ApiMethodName = "DeleteApiMethod",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "api/Roles/DeleteApiMethod"
                        },
                        new
                        {
                            Id = 49,
                            ApiMethodName = "GetApiMethodRoles",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = false,
                            PathUrl = "/api/Roles/GetApiMethodRoles"
                        },
                        new
                        {
                            Id = 50,
                            ApiMethodName = "GetApiMethodRole",
                            HttpMethod = "GET",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/GetApiMethodRole"
                        },
                        new
                        {
                            Id = 51,
                            ApiMethodName = "PutApiMethodRole",
                            HttpMethod = "PUT",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PutApiMethodRole"
                        },
                        new
                        {
                            Id = 52,
                            ApiMethodName = "PostApiMethodRole",
                            HttpMethod = "POST",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/PostApiMethodRole"
                        },
                        new
                        {
                            Id = 53,
                            ApiMethodName = "DeleteApiMethodRole",
                            HttpMethod = "DELETE",
                            IsDeleted = false,
                            IsNeedAuthentication = true,
                            IsNotNullParam = true,
                            PathUrl = "/api/Roles/DeleteApiMethodRole"
                        });
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.ApiMethodRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApiMethodId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiMethodId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApiMethodRoles","api");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiMethodId = 1,
                            IsDeleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApiMethodId = 1,
                            IsDeleted = false,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApiMethodId = 2,
                            IsDeleted = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.CodeAthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CodeAthId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("NameAth")
                        .IsRequired()
                        .HasColumnType("character varying(350)")
                        .HasMaxLength(350);

                    b.HasKey("Id");

                    b.HasIndex("CodeAthId");

                    b.ToTable("CodeAthTypes","dist");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodeAthTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGeneric")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int?>("StockId")
                        .HasColumnType("integer");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CodeAthTypeId");

                    b.HasIndex("StockId");

                    b.HasIndex("VendorId");

                    b.ToTable("Drugs","tab");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Exception")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("FactTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("HeaderRequest")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("HeaderResponse")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("HttpMethod")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MethodRoute")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Param")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("PathUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ResponseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Result")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Logs","log");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMode")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNetwork")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsType")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Pharmacies","dist");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("RegionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("RegionTypeId");

                    b.ToTable("Regions","dist");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.RegionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("RegionTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("RegionTypes","dist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RegionTypeName = "Государство"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RegionTypeName = "Субъект(регион)"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            RegionTypeName = "Город"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            RegionTypeName = "Сёла, деревни и др."
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            RegionTypeName = "Микрорайон"
                        });
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles","dist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RoleName = "user"
                        });
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDiscount")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("date");

                    b.Property<int?>("SaleImportFileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("SaleImportFileId");

                    b.ToTable("Sales","tab");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.SaleImportFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("SaleImportFiles","tab");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PharmacyId")
                        .HasColumnType("integer")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Stocks","tab");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users","dist");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDomestic")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("ProducingCountry")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Vendors","dist");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.ApiMethodRole", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.ApiMethod", "ApiMethod")
                        .WithMany("ApiMethodRoles")
                        .HasForeignKey("ApiMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FarmApp.Domain.Core.Entity.Role", "Role")
                        .WithMany("ApiMethodRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.CodeAthType", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.CodeAthType", "CodeAth")
                        .WithMany("CodeAthTypes")
                        .HasForeignKey("CodeAthId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Drug", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.CodeAthType", "CodeAthType")
                        .WithMany("Drugs")
                        .HasForeignKey("CodeAthTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FarmApp.Domain.Core.Entity.Stock", null)
                        .WithMany("Drugs")
                        .HasForeignKey("StockId");

                    b.HasOne("FarmApp.Domain.Core.Entity.Vendor", "Vendor")
                        .WithMany("Drugs")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Pharmacy", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.Pharmacy", "ParentPharmacy")
                        .WithMany("Pharmacies")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FarmApp.Domain.Core.Entity.Region", "Region")
                        .WithMany("Pharmacies")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Region", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.Region", "ParentRegion")
                        .WithMany("Regions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FarmApp.Domain.Core.Entity.RegionType", "RegionType")
                        .WithMany("Regions")
                        .HasForeignKey("RegionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Sale", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.Drug", "Drug")
                        .WithMany("Sales")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FarmApp.Domain.Core.Entity.Pharmacy", "Pharmacy")
                        .WithMany("Sales")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FarmApp.Domain.Core.Entity.SaleImportFile", "SaleImportFile")
                        .WithMany()
                        .HasForeignKey("SaleImportFileId");
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.Stock", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmApp.Domain.Core.Entity.User", b =>
                {
                    b.HasOne("FarmApp.Domain.Core.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
